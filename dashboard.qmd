---
title: "Today's Music"
format: 
  dashboard: 
    logo: "images/Spotify_Primary_logo_RGB_Green.png"
---

## Column {width="50%"}

```{r loadpackages}
#| echo: false
#| include: false
library(tidyverse)
library(httr2)
library(gt)
```


```{r createaccesstoken}
#| echo: false
#| include: false

client_id <-  Sys.getenv("SPOTIFY_CLIENT_ID")
client_secret <-  Sys.getenv("SPOTIFY_CLIENT_SECRET")

response <- request("https://accounts.spotify.com/api/token") |>
  req_method("POST") |>
  req_body_raw(
    paste0(
      "grant_type=client_credentials&client_id=",
      client_id,
      "&client_secret=",
      client_secret
    ),
    type = "application/x-www-form-urlencoded"
  ) |>
  req_perform() |>
  resp_body_json()

spotify_access_token <- response$access_token
```



```{r getB4BARSplaylist}
# curl_translate("curl --request GET \
#   --url https://api.spotify.com/v1/playlists/2lVfLEZz9MhWxGMzgFslLj \
#   --header 'Authorization: Bearer 1POdFZRZbvb...qqillRxMr2z'")

tth <- request("https://api.spotify.com/v1/playlists/2lVfLEZz9MhWxGMzgFslLj") |> 
  req_method("GET") |> 
  req_headers(
    Authorization = paste0("Bearer ", spotify_access_token)) |> 
  req_perform() |>
  resp_body_json()
```



```{r extractsongs}
B4Bars <- data.frame(
  song_name = unlist(lapply(tth$tracks$items, FUN = function(x) {x$track$name})),
  song_id = unlist(lapply(tth$tracks$items, FUN = function(x) {x$track$id})),
  artist_name = unlist(lapply(tth$tracks$items, FUN = function(item) {item$track$album$artists[[1]]$name})),
  album_art = unlist(lapply(tth$tracks$items, FUN = function(item) {item$track$album$images[[1]]$url})),
  track_duration = unlist(lapply(tth$tracks$items, FUN = function(item) {item$track$duration_ms})),
  popularity = unlist(lapply(tth$tracks$items, FUN = function(item) {item$track$popularity})),
 explicit = unlist(lapply(tth$tracks$items, FUN = function(item) {item$track$explicit})))
```



```{r extractAudioAnalysis}
# curl_translate("curl --request GET \
#   --url https://api.spotify.com/v1/audio-analysis/11dFghVXANMlKmJXsNCbNl \
#   --header 'Authorization: Bearer 1POdFZRZbvb...qqillRxMr2z'")

B4Bars_Analysis <- vector(mode = "list", length = 82)

for (i in 1:82) {
  audio_analysis_url <- paste0("https://api.spotify.com/v1/audio-analysis/", B4Bars$song_id[i])
  audio_analysis <- request(audio_analysis_url) |>
    req_method("GET") |>
    req_headers(
      Authorization = paste0("Bearer ", spotify_access_token)
    ) |>
    req_perform() |>
    resp_body_json()
  
  Sys.sleep(1)
  
  # tempo for each section
  B4Bars_Analysis[[i]] <- unlist(lapply(audio_analysis$sections, function(x) x$tempo))
}

# add tempo to B4Bars
B4Bars$tempo <- I(B4Bars_Analysis)
```


```{r createtable}
# gt table
gt_table <- B4Bars |> 
  select(album_art, song_name, artist_name, track_duration, popularity, tempo) |> 
  gt() |> 
  cols_label( 
    album_art = md("**Song**"), 
    song_name = "", 
    artist_name = md("**Artist**"), 
    track_duration = md("**Duration**"), 
    popularity = md("**Popularity**") 
  ) |> 
  text_transform( 
    locations = cells_body(columns = album_art),
    fn = function(x) { web_image(url = x, height = 50) }
  ) |> 
  fmt( 
    columns = track_duration, 
    fns = function(x) { 
      minutes <- floor(x / 60000) 
      seconds <- round((x %% 60000) / 1000)
      sprintf("%d:%02d", minutes, seconds) 
    } 
  ) |> 
  cols_nanoplot(
    columns = tempo,
    plot_type = "line",
    new_col_name = "tempos",
    new_col_label = md("**Tempo**"),
    options = nanoplot_options(
      data_point_fill_color = "lightgreen",
      data_point_stroke_color = "lightgreen",
      data_area_fill_color = "lightgreen",
      data_line_stroke_color = "purple"
    )
  ) |> 
  tab_options(
    table.font.color = "white",
    table.background.color = "black"
  ) |> 
  tab_footnote(
    footnote = "The popularity of a track is a value between 0 and 100, where 100 represents the most popular and 0 represents the least popular. This metric reflects how frequently a track has been played in recent times.",
    locations = cells_column_labels(columns = popularity)
  ) |> 
  tab_footnote(
    footnote = "The tempo is measured in beats per minute (BPM) and indicates the speed at which the music is played. We illustrate how the tempo varies across different sections of a given song.",
    locations = cells_column_labels(columns = tempo)
  ) |> 
  tab_source_note(
    source_note = md("**Source:** [B4Bars Playlist] (https://open.spotify.com/playlist/2lVfLEZz9MhWxGMzgFslLj)")
  )

gt_table

```


### Row {height="30%"}

```{r, sendtoojs}
#| echo: false
#| include: false
ojs_define(rap_ojs = B4Bars)
```


```{ojs}
//| expandable: false

// import data
rap_hits = transpose(rap_ojs)

// create dropdown menu
viewof songDropdown = Inputs.select(
  rap_hits.map(d=> d.song_name),
  {
  label: "choose a song",
  unique: true
  }
)


// Create a reactive variable to hold the selected song
selectedSong = songDropdown;

// Get the corresponding Spotify ID for the selected song
selectedSpotifyId = rap_hits.find(d => d.song_name === selectedSong).spotify_id;

// Create the iframe with the selected Spotify track
html`<iframe
    style="border-radius: 12px"
    src="https://open.spotify.com/embed/track/${selectedSpotifyId}?utm_source=generator"
    width="100%"
    height="352"
    frameBorder="0"
    allowfullscreen
    allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
    loading="lazy">
</iframe>`;
```


<iframe 
    style="border-radius: 12px" 
    src="https://open.spotify.com/embed/track/0UwtT6ePrSWejSJeJ0wxWU?utm_source=generator" 
    width="100%" 
    height="352" 
    frameBorder="0" 
    allowfullscreen 
    allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" 
    loading="lazy">
</iframe>


