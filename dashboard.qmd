---
title: "Tom's Playlist"
format: 
  dashboard: 
    logo: "images/Spotify_Primary_logo_RGB_Green.png"
---

## Column {width="50%"}

```{r loadpackages}
#| echo: false
#| include: false
library(tidyverse)
library(httr2)
library(gt)
library(jsonlite)
```


```{r createaccesstoken}
#| echo: false
#| include: false

client_id <- Sys.getenv("SPOTIFY_CLIENT_ID")
client_secret <- Sys.getenv("SPOTIFY_CLIENT_SECRET")

response <- request("https://accounts.spotify.com/api/token") |>
  req_method("POST") |>
  req_body_raw(
    paste0(
      "grant_type=client_credentials&client_id=",
      client_id,
      "&client_secret=",
      client_secret
    ),
    type = "application/x-www-form-urlencoded"
  ) |>
  req_perform() |>
  resp_body_json()

spotify_access_token <- response$access_token
```


```{r getB4BARSplaylist}
# curl_translate("curl --request GET \
#   --url https://api.spotify.com/v1/playlists/2lVfLEZz9MhWxGMzgFslLj \
#   --header 'Authorization: Bearer 1POdFZRZbvb...qqillRxMr2z'")

# playlist <- request("https://api.spotify.com/v1/playlists/48odFcjpfAk4ZGC9Arj6p7") |> 
#   req_method("GET") |> 
#   req_headers(
#     Authorization = paste0("Bearer ", spotify_access_token)) |> 
#   req_perform() |>
#   resp_body_json()
```


```{r getHOMEURBANplaylist}
# playlist1 <- request("https://api.spotify.com/v1/playlists/2lVfLEZz9MhWxGMzgFslLj") |> 
#   req_method("GET") |> 
#   req_headers(
#     Authorization = paste0("Bearer ", spotify_access_token)) |> 
#   req_perform() |>
#   resp_body_json()
```


```{r getJUSTVIBINplaylist}
# playlist2 <- request("https://api.spotify.com/v1/playlists/7CfKg9izzVp9BkFWuQIbQ6") |> 
#   req_method("GET") |> 
#   req_headers(
#     Authorization = paste0("Bearer ", spotify_access_token)) |> 
#   req_perform() |>
#   resp_body_json()
```


```{r getPRIVATESCHOOLVOL1playlist}
playlist3 <- request("https://api.spotify.com/v1/playlists/5zkGkYCwKGHnRfkpPRRo3J") |> 
  req_method("GET") |> 
  req_headers(
    Authorization = paste0("Bearer ", spotify_access_token)) |> 
  req_perform() |>
  resp_body_json()
```



```{r extractsongs}
# B4Bars <- data.frame(
#   song_name = unlist(lapply(playlist$tracks$items, FUN = function(x) {x$track$name})),
#   song_id = unlist(lapply(playlist$tracks$items, FUN = function(x) {x$track$id})),
#   artist_name = unlist(lapply(playlist$tracks$items, FUN = function(item) {item$track$album$artists[[1]]$name})),
#   album_art = unlist(lapply(playlist$tracks$items, FUN = function(item) {item$track$album$images[[1]]$url})),
#   track_duration = unlist(lapply(playlist$tracks$items, FUN = function(item) {item$track$duration_ms})),
#   popularity = unlist(lapply(playlist$tracks$items, FUN = function(item) {item$track$popularity})),
#   explicit = unlist(lapply(playlist$tracks$items, FUN = function(item) {if (item$track$explicit) "explicit" else "clean"}))
# )
# 
# HomeUrban <- data.frame(
#   song_name = unlist(lapply(playlist1$tracks$items, FUN = function(x) {x$track$name})),
#   song_id = unlist(lapply(playlist1$tracks$items, FUN = function(x) {x$track$id})),
#   artist_name = unlist(lapply(playlist1$tracks$items, FUN = function(item) {item$track$album$artists[[1]]$name})),
#   album_art = unlist(lapply(playlist1$tracks$items, FUN = function(item) {item$track$album$images[[1]]$url})),
#   track_duration = unlist(lapply(playlist1$tracks$items, FUN = function(item) {item$track$duration_ms})),
#   popularity = unlist(lapply(playlist1$tracks$items, FUN = function(item) {item$track$popularity})),
#   explicit = unlist(lapply(playlist1$tracks$items, FUN = function(item) {if (item$track$explicit) "explicit" else "clean"}))
# )
# 
# Justvibin <- data.frame(
#   song_name = unlist(lapply(playlist2$tracks$items, FUN = function(x) {x$track$name})),
#   song_id = unlist(lapply(playlist2$tracks$items, FUN = function(x) {x$track$id})),
#   artist_name = unlist(lapply(playlist2$tracks$items, FUN = function(item) {item$track$album$artists[[1]]$name})),
#   album_art = unlist(lapply(playlist2$tracks$items, FUN = function(item) {item$track$album$images[[1]]$url})),
#   track_duration = unlist(lapply(playlist2$tracks$items, FUN = function(item) {item$track$duration_ms})),
#   popularity = unlist(lapply(playlist2$tracks$items, FUN = function(item) {item$track$popularity})),
#   explicit = unlist(lapply(playlist2$tracks$items, FUN = function(item) {if (item$track$explicit) "explicit" else "clean"}))
# )

Pschoolvo1 <- data.frame(
  song_name = unlist(lapply(playlist3$tracks$items, FUN = function(x) {x$track$name})),
  song_id = unlist(lapply(playlist3$tracks$items, FUN = function(x) {x$track$id})),
  artist_name = unlist(lapply(playlist3$tracks$items, FUN = function(item) {item$track$album$artists[[1]]$name})),
  album_art = unlist(lapply(playlist3$tracks$items, FUN = function(item) {item$track$album$images[[1]]$url})),
  track_duration = unlist(lapply(playlist3$tracks$items, FUN = function(item) {item$track$duration_ms})),
  popularity = unlist(lapply(playlist3$tracks$items, FUN = function(item) {item$track$popularity})),
  explicit = unlist(lapply(playlist3$tracks$items, FUN = function(item) {if (item$track$explicit) "explicit" else "clean"}))
)
```



```{r additionalfeatures}
song_ids <- Pschoolvo1$song_id

# several tracks
url <- paste0("https://api.spotify.com/v1/tracks?ids=", paste(song_ids, collapse = ","))

# fetch track details
response <- request(url) |> 
  req_method("GET") |> 
  req_headers(Authorization = paste0("Bearer ", spotify_access_token)) |> 
  req_perform() |> 
  resp_body_json()

# additional features
Pschoolvo1$release_date <- unlist(lapply(response$tracks, FUN = function(x) {x$album$release_date}))
Pschoolvo1$album_type <- unlist(lapply(response$tracks, FUN = function(x) {x$album$album_type}))
Pschoolvo1$genres <- unlist(lapply(response$tracks, FUN = function(x) {
  artist_id <- x$album$artists[[1]]$id
  artist_response <- request(paste0("https://api.spotify.com/v1/artists/", artist_id)) |> 
    req_method("GET") |> 
    req_headers(Authorization = paste0("Bearer ", spotify_access_token)) |> 
    req_perform() |> 
    resp_body_json()
  paste(artist_response$genres, collapse = ", ")
}))
```


```{r extractAudioAnalysis}
# # curl_translate("curl --request GET \
# #   --url https://api.spotify.com/v1/audio-analysis/11dFghVXANMlKmJXsNCbNl \
# #   --header 'Authorization: Bearer 1POdFZRZbvb...qqillRxMr2z'")
# 
# B4Bars_Analysis <- vector(mode = "list", length = 82)
# for (i in 1:82) {
#   audio_analysis <- request(paste0("https://api.spotify.com/v1/audio-analysis/", B4Bars$song_id[i])) |>
#   req_method("GET") |>
#   req_headers(
#       Authorization = paste0("Bearer ", spotify_access_token)
#     ) |>
#     req_perform() |>
#     resp_body_json()
#   
#   # tempo for each section
#   B4Bars_Analysis[[i]] <- unlist(lapply(audio_analysis$sections, FUN = function(x) {x$tempo }))
# }
# 
# # add tempo to B4Bars
# B4Bars$tempo <- I(B4Bars_Analysis)
```



```{r table}
# gt table
gt_table <- Pschoolvo1 |> 
  select(album_art, song_name, artist_name, track_duration, popularity, explicit, album_type, genres) |> 
  gt() |> 
  cols_label( 
    album_art = md("**Song**"), 
    song_name = "", 
    artist_name = md("**Artist**"), 
    track_duration = md("**Duration**"), 
    popularity = md("**Popularity**"),
    album_type = md("**Release**"),
    explicit = md("**Rated**")
  ) |> 
  text_transform( 
    locations = cells_body(columns = album_art),
    fn = function(x) { web_image(url = x, height = 50) }
  ) |> 
  fmt( 
    columns = track_duration, 
    fns = function(x) { 
      minutes <- floor(x / 60000) 
      seconds <- round((x %% 60000) / 1000)
      sprintf("%d:%02d", minutes, seconds) 
    } 
  ) |> 
  # cols_nanoplot(
  #   columns = tempo,
  #   plot_type = "line",
  #   new_col_name = "tempos",
  #   new_col_label = md("**Tempo**"),
  #   options = nanoplot_options(
  #     data_point_fill_color = "lightgreen",
  #     data_point_stroke_color = "lightgreen",
  #     data_area_fill_color = "lightgreen",
  #     data_line_stroke_color = "purple"
  #   )
  # ) |> 
  tab_options(
    table.font.color = "white",
    table.background.color = "black"
  ) |> 
  tab_footnote(
    footnote = "The popularity of a track is a value between 0 and 100, where 100 represents the most popular and 0 represents the least popular. This metric reflects how frequently a track has been played in recent times.",
    locations = cells_column_labels(columns = popularity)
  ) |> 
  tab_source_note(
    source_note = md("**Source:** [Piano] (https://api.spotify.com/v1/playlists/48odFcjpfAk4ZGC9Arj6p7)")
  )

gt_table
```


## Column {width="60%"}

### Row {height="10%"}

```{r, sendtoojs}
#| echo: false
#| include: false
ojs_define(rap_ojs = Pschoolvo1)
```

### Row {height="70%"}

```{ojs}
//| expandable: false

// import data
rap_hits = transpose(rap_ojs)

// create dropdown menu
viewof songDropdown = Inputs.select(
  rap_hits.map(d=> d.song_name),
  {
  label: "Choose a Song",
  unique: true
  }
)

// Function to get the corresponding song_id for the selected song_name
function getSongId(songName) {
  const selectedSong = rap_hits.find(d => d.song_name === songName);
  return selectedSong ? selectedSong.song_id : null;
}

// Embed the iframe based on the selected song
html`<div>
  <iframe
    style="border-radius:12px"
    src="https://open.spotify.com/embed/track/${getSongId(songDropdown)}?utm_source=generator"
    width="100%"
    height="352"
    frameBorder="0"
    allowfullscreen=""
    allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
    loading="lazy"></iframe>
</div>`
```



### Row {height="20%"}

:::{.card expandable="false"}
<div style="background-color: #7D3C98; color: white; border-radius: 10px; padding: 10px; text-align: center; display: flex; align-items: center; justify-content: center; height: 100%;">

  <span style="font-size: 1vw; width: 100%;">
    This dashboard was created by **Tom Nangosyah** based on a tutorial by **Melissa Van Bussel**<br> You can also implement this dashboard using this  [repo](https://melissavanbussel.github.io/spotify-dashboard).
  </span>

</div>
:::

